"""
    所谓的深浅拷贝：
        浅拷贝：copy模块下的copy()
        深拷贝：copy模块下的deepcopy()

    大白话解释：
        深拷贝拷贝的多、浅拷贝拷贝的少

    深浅拷贝主要是针对可变类型，
        深拷贝拷贝所有（可变类型）的层
        浅拷贝只拷贝（可变类型）的第一层
    如果是针对于不可变类型，则用法和普通赋值一样。并无区别

    深浅拷贝针对于不可变类型用法和普通变量赋值一样


"""
import copy


def 演示一_普通赋值_不可变类型():

    # 普通赋值之不可变类型
    a = 10
    b = a

    print("id(a) --> ", id(a))
    print("id(a) --> ", id(b))
    print("id(a) --> ", id(10))

def 演示二_普通赋值_可变类型():

    # 普通赋值之可变类型
    a = [1, 2, 3]
    b = [11, 22, 33]

    c = [a, b]
    d = c

    print("id(c) --> ", id(c))
    print("id(d) --> ", id(d))

# 浅拷贝拷贝可变类型,只拷贝第一层数据。深层次的数据不拷贝
def 演示三_浅拷贝_可变类型():
    a = [1, 2, 3]
    b = [11, 22, 33]
    c = [6, 7, a, b]

    d = copy.copy(c)        # 浅拷贝  可变类型会产生一个新的对象，并浅拷贝只会将c的第一层拷贝过来
    # print(d)

    print("id(c) --> ", id(c))      # id(c) -->  2772727952256
    print("id(d) --> ", id(d))      # id(d) -->  2772727952320

    print("c[2] --> ", id(c[2]))
    print(" a   --> ", id(a))

    a[2] = 22

    print("c-->", c)
    print("d-->", d)

# 浅拷贝不可变类型：不会给拷贝的对象C开辟新的内存空间，而只是拷贝这个对象的引用
def 演示四_浅拷贝_不可变类型():
    a = (1, 2, 3)
    b = (11, 22, 33)
    c = (6, 7, a, b)

    d = copy.copy(c)

    print("id(c) -->", id(c))
    print("id(d) -->", id(d))

# 深拷贝拷贝可变类型，则会拷贝所有的（可变的）层
def 演示五_深拷贝_可变类型():
    a = [1, 2, 3]
    b = [11, 22, 33]

    e = (1,)

    c = [6, 7, a, b, e]

    d = copy.deepcopy(c)

    print("id(c) -->", id(c))
    print("id(d) -->", id(d))

    a[1] = 100
    b[1] = 800
    print(f"c:{c}")
    print(f"d:{d}")

    # 不可变类型地址值相同
    print(id(c[0]))
    print(id(d[0]))

    # 可变类型地址值不同
    print(id(c[3]))
    print(id(d[3]))

    # 不可变类型地址值相同
    print(id(c[4]))
    print(id(d[4]))

    # 结果不同
    c[0] = 1    # 只对c[0]进行重新赋值
    print(c)
    print(id(c[0]))
    print(d)
    print(id(d[0]))

def 演示六_深拷贝_不可变类型():
    a = (1, 2, 3)
    b = (11, 22, 33)
    c = (6, 7, a, b)


    d = copy.deepcopy(c)

    print("id(c) -->", id(c))
    print("id(d) -->", id(d))

def aa():


    a = [11,22]
    b = (1,2,3,a)
    c = copy.deepcopy(b)        # 不可变类型

    d = (11, 22)
    e = [1, 2, 3, d]
    c = copy.deepcopy(e)            #


if __name__ == '__main__':
    # 演示一_普通赋值_不可变类型()
    # 演示二_普通赋值_可变类型()
    # 演示三_浅拷贝_可变类型()
    # 演示四_浅拷贝_不可变类型()
    # 演示五_深拷贝_可变类型()
    演示六_深拷贝_不可变类型()