变量赋值执行原理:
    a = "python"
    Python解释器干的事情：
        ① 创建变量a
        ② 创建一个对象(分配一块内存)，来存储值 'python'
        ③ 将变量与对象，通过指针连接起来，从变量到对象的连接称之为引用(变量引用对象)


不可变对象：
    一旦创建就不可修改的对象，包括字符串、元组、数值类型（整型、浮点型）
    该对象所指向的内存中的值不能被改变。
    当改变某个变量时候，由于其所指的值不能被改变，相当于把原来的值复制一份后再改变，
        这会开辟一个新的地址，变量再指向这个新的地址。

可变对象：
    可以修改的对象，包括列表、字典、集合
    该对象所指向的内存中的值可以被改变。
    变量（准确的说是引用）改变后，实际上是其所指的值直接发生改变，并没有发生复制行为，也没有开辟新的地址，
        通俗点说就是原地改变。


浅拷贝:
    浅拷贝: 创建新对象，其内容是原对象的引用。
    浅拷贝之所以称为浅拷贝，是它仅仅只拷贝了一层，拷贝了最外围的对象本身，内部的元素都只是拷贝了一个引用而已
    仅拷贝对象的引用，新的对象与原对象共享内存中的子对象。如果子对象发生变化，两个对象都会受影响。


深拷贝:
    深拷贝：和浅拷贝对应，深拷贝拷贝了对象的所有元素，包括多层嵌套的元素。
    深拷贝出来的对象是一个全新的对象，不再与原来的对象有任何关联。
    所以改变原有被复制对象不会对已经复制出来的新对象产生影响。
    只有一种形式，copy模块中的deepcopy函数。
    拷贝对象及其所包含的所有子对象的独立副本。新对象与原对象完全独立，修改新对象不会影响原对象。
