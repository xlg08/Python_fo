# 回归问题

# 1.导包
from sklearn.neighbors import KNeighborsRegressor

# 2.创建模型算法对象    （回归的）
es = KNeighborsRegressor(n_neighbors=2)
# 当邻居值为2的时候，邻居是 [3,10,10],[4,11,12]
# 回归：两个样本均值 (0.3+0.4)/2=0.35

# 当邻居值为1的时候，邻居是[3, 10, 11] (通过欧氏距离计算)
# 预测为 0.3

# 当邻居值为1的时候，邻居是[1, 1, 0],[3, 10, 11],[4,11,12] (通过欧氏距离计算)
# 预测为 (0.2 + 0.3 + 0.4) / 3

# 当邻居值为4的时候，邻居是[0, 0, 1],[1, 1, 0],[3, 10, 11],[4,11,12] (通过欧氏距离计算)
# 预测为 (0.1 + 0.2 + 0.3 + 0.4) / 4

# 3.准备训练集 x和y
# x_train = [[0, 0, 1], [1, 1, 0], [3, 10, 10], [4, 11, 12]]
# y_train = [0.1, 0.2, 0.3, 0.4]

# 无连续性标签  --  报错
x_train = [[12, 27, 3], [13, 15, 10], [23, 16, 9], [21, 22, 6]]
# y_train = [0.1, 0.2, 0.3, 0.4]
# y_train = [4, 6, 1, 4]
# y_train = ["4", "6", "1", "4"]      # 字符串报错
y_train = [True, 6, 1, 4]


# 4.准备测试集
x_test = [[3, 10, 11]]

# 5.训练模型
es.fit(x_train, y_train)

# 6.模型预测（并打印结果）
y_test = es.predict(x_test)

print(f"预测结果为{y_test}")






